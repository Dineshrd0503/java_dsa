import java.util.LinkedList;

/**
 * Demonstration of java.util.LinkedList Class with Additional Methods
 * 
 * Description:
 * This class demonstrates the use of the built-in java.util.LinkedList class to perform
 * basic and additional operations such as adding, removing, accessing, replacing, and
 * checking elements. It serves as an example of leveraging the Java Collections Framework.
 * 
 * Author: Generated by Grok 3 (xAI)
 * Date: 02:44 PM IST, Wednesday, July 30, 2025
 */

public class LinkedListDemo {
    /**
     * Main method to test the LinkedList implementation with additional methods.
     * 
     * @param args Command-line arguments (not used)
     */
    public static void main(String[] args) {
        // Create a LinkedList of Integers
        LinkedList<Integer> list = new LinkedList<>();

        // Test add(E element)
        list.add(10);
        list.add(20);
        System.out.println("After adding 10 and 20: " + list);

        // Test addFirst(E element)
        list.addFirst(5);
        System.out.println("After adding 5 at the beginning: " + list);

        // Test add(int index, E element)
        list.add(2, 15); // Insert 15 at index 2
        System.out.println("After adding 15 at index 2: " + list);

        // Test get(int index)
        System.out.println("Element at index 2: " + list.get(2));

        // Test set(int index, E element)
        list.set(2, 25); // Replace element at index 2 with 25
        System.out.println("After setting index 2 to 25: " + list);

        // Test contains(Object o)
        System.out.println("Contains 25? " + list.contains(25));
        System.out.println("Contains 30? " + list.contains(30));

        // Test size()
        System.out.println("Size of list: " + list.size());

        // Test remove(int index)
        int removed = list.remove(1);
        System.out.println("Removed element at index 1: " + removed);
        System.out.println("After removal: " + list);

        // Test removeLast()
        int lastRemoved = list.removeLast();
        System.out.println("Removed last element: " + lastRemoved);
        System.out.println("After removing last: " + list);

        // Test isEmpty()
        System.out.println("Is list empty? " + list.isEmpty());

        // Test clear()
        list.clear();
        System.out.println("After clear: " + list);
        System.out.println("Is list empty after clear? " + list.isEmpty());
    }
}
